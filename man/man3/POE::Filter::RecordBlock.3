.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "POE::Filter::RecordBlock 3"
.TH POE::Filter::RecordBlock 3 "2010-11-19" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
POE::Filter::RecordBlock \- translate between discrete records and blocks of them
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Hello, dear reader.  This \s-1SYNOPSIS\s0 does not contain a fully
functioning sample program because your humble documenter cannot come
up with a short, reasonable use case for this module.  Please contact
the maintainer if this module is useful to you.  Otherwise you may wake
up one morning to discover that it has been deprecated.
.PP
.Vb 6
\&  $filter = new POE::Filter::RecordBlock( BlockSize => 4 );
\&  $arrayref_of_arrayrefs = $filter\->get($arrayref_of_raw_data);
\&  $arrayref_of_raw_chunks = $filter\->put($arrayref_of_arrayrefs);
\&  $arrayref_of_raw_chunks = $filter\->put($single_arrayref);
\&  $arrayref_of_leftovers = $filter\->get_pending;
\&  $arrayref_of_leftovers = $filter\->put_pending;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
On input, POE::Filter::RecordBlock translates a stream of discrete
items into a \*(L"block\*(R" of them.  It does this by collecting items until
it has BlockSize of them, then returning the lot of them in an array
reference.
.PP
On output, this module flattens array references.
.PP
This module may be deprecated in the future.  Please contact the
maintainer if this module is useful to you.
.SH "PUBLIC FILTER METHODS"
.IX Header "PUBLIC FILTER METHODS"
In addition to the usual POE::Filter methods, POE::Filter::RecordBlock
supports the following.
.SS "new"
.IX Subsection "new"
\&\fInew()\fR takes at least one mandatory argument, BlockSize, which must be
defined and greater than zero.  \fInew()\fR also accepts a CheckPut Boolean
parameter that indicates whether \fIput()\fR should check for the proper
BlockSize before allowing data to be serialized.
.PP
Using CheckPut is not recommended, as it enables a write buffer in the
filter, therefore breaking \fIput()\fR for normal use.
.SS "put_pending"
.IX Subsection "put_pending"
\&\fIput_pending()\fR returns an arrayref of any records that are waiting to
be sent.  It is the outbound equivalent of POE::Filter's \fIget_pending()\fR
accessor.  \fIput_pending()\fR is not part of the canonical POE::Filter \s-1API\s0,
so nothing will use it.  It's up to applications to handle pending
output, whenever it's appropriate to do so.
.SS "blocksize"
.IX Subsection "blocksize"
\&\fIblocksize()\fR is an accessor/mutator for POE::Filter::RecordBlock's
BlockSize value.
.SS "checkput"
.IX Subsection "checkput"
\&\fIcheckput()\fR is an accessor/mutator for POE::Filter::RecordBlock's
CheckPut flag.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
POE::Filter for more information about filters in general.
.PP
POE::Filter::Stackable for more details on stacking filters.
.SH "BUGS"
.IX Header "BUGS"
This filter may maintain an output buffer that no other part of \s-1POE\s0
will know about.
.PP
This filter implements a highly specialized and seemingly not
generally useful feature.
.PP
Does anyone use this filter?  This filter may be deprecated if nobody
speaks up.
.SH "AUTHORS & COPYRIGHTS"
.IX Header "AUTHORS & COPYRIGHTS"
The RecordBlock filter was contributed by Dieter Pearcey.
Documentation is provided by Rocco Caputo.
.PP
Please see the \s-1POE\s0 manpage for more information about authors and
contributors.
