.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Log::Log4perl 3"
.TH MooseX::Log::Log4perl 3 "2010-04-30" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Log::Log4perl \- A Logging Role for Moose based on Log::Log4perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& package MyApp;
\& use Moose;
\& use Log::Log4perl qw(:easy);
\&
\& with \*(AqMooseX::Log::Log4perl\*(Aq;
\&
\& BEGIN {
\&   Log::Log4perl\->easy_init();
\& }
\&
\& sub foo {
\&   my ($self) = @_;
\&   $self\->log\->debug("started bar");    ### logs with default class catergory "MyApp"
\&   ...
\&   $self\->log(\*(Aqspecial\*(Aq)\->info(\*(Aqbar\*(Aq);  ### logs with category special
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A logging role building a very lightweight wrapper to Log::Log4perl for use with your Moose classes.
The initialization of the Log4perl instance must be performed prior to logging the first log message.
Otherwise the default initialization will happen, probably not doing the things you expect.
.PP
For compatibility the \f(CW\*(C`logger\*(C'\fR attribute can be accessed to use a common interface for application logging.
.PP
For simple logging needs use MooseX::Log::Log4perl::Easy to directly add log_<level> methods to your class
instance.
.PP
.Vb 1
\&    $self\->log_info("Dummy");
.Ve
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "logger"
.IX Subsection "logger"
The \f(CW\*(C`logger\*(C'\fR attribute holds the Log::Log4perl object that implements all logging methods for the
defined log levels, such as \f(CW\*(C`debug\*(C'\fR or \f(CW\*(C`error\*(C'\fR. As this method is defined also in other logging
roles/systems like MooseX::Log::LogDispatch this can be thought of as a common logging interface.
.PP
.Vb 1
\&  package MyApp::View::JSON;
\&
\&  extends \*(AqMyApp::View\*(Aq;
\&  with \*(AqMooseX:Log::Log4perl\*(Aq;
\&
\&  sub bar {
\&    $self\->logger\->debug("Something could be crappy here");     # logs a debug message
\&    $self\->logger\->debug("Something could be crappy here");     # logs a debug message
\&  }
.Ve
.SS "log([$category])"
.IX Subsection "log([$category])"
Basically the same as logger, but also allowing to change the log category
for this log message.
.PP
.Vb 5
\& if ($myapp\->log\->is_debug()) {
\&     $myapp\->log\->debug("Woot"); # category is class myapp
\& }
\& $myapp\->log("TempCat")\->info("Foobar"); # category TempCat
\& $myapp\->log\->info("Grumble"); # category class again myapp
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Log4perl, Moose, MooseX::LogDispatch
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-moosex\-log4perl@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.PP
Or come bother us in \f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Roland Lammel \f(CW\*(C`<lammel@cpan.org>\*(C'\fR
.PP
Inspired by the work by Chris Prather \f(CW\*(C`<perigrin@cpan.org>\*(C'\fR and Ash
Berlin \f(CW\*(C`<ash@cpan.org>\*(C'\fR on MooseX::LogDispatch
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
In alphabetical order:
.ie n .IP "Michael Schilli ""<m@perlmeister.com>"" for Log::Log4perl and suggestions in the interface." 2
.el .IP "Michael Schilli \f(CW<m@perlmeister.com>\fR for Log::Log4perl and suggestions in the interface." 2
.IX Item "Michael Schilli <m@perlmeister.com> for Log::Log4perl and suggestions in the interface."
.PD 0
.ie n .IP "Tim Bunce ""<TIMB@cpan.org>"" for corrections in the MooseX::Log::Log4perl::Easy module." 2
.el .IP "Tim Bunce \f(CW<TIMB@cpan.org>\fR for corrections in the MooseX::Log::Log4perl::Easy module." 2
.IX Item "Tim Bunce <TIMB@cpan.org> for corrections in the MooseX::Log::Log4perl::Easy module."
.PD
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2008\-2010, Roland Lammel \f(CW\*(C`<lammel@cpan.org>\*(C'\fR, http://www.quikit.at. Some rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
