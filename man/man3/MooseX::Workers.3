.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Workers 3"
.TH MooseX::Workers 3 "2010-11-16" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Workers \- Simple sub\-process management for asynchronous tasks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& EXAMPLE #1:
\&    package Manager;
\&    #    This example prints output from the children normally on both STDOUT and STDERR
\&
\&    use Moose;
\&    with qw(MooseX::Workers);
\&
\&    sub run {
\&        $_[0]\->spawn( sub { sleep 3; print "Hello World\en" } );
\&        warn "Running now ... ";
\&        POE::Kernel\->run();
\&    }
\&
\&    # Implement our Interface
\&    sub worker_stdout  { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub worker_stderr  { shift; warn join \*(Aq \*(Aq, @_;  }
\&
\&    sub worker_manager_start { warn \*(Aqstarted worker manager\*(Aq }
\&    sub worker_manager_stop  { warn \*(Aqstopped worker manager\*(Aq }
\&
\&    sub max_workers_reached  { warn \*(Aqmaximum worker count reached\*(Aq }
\&    sub worker_error   { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub worker_done    { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub worker_started { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub sig_child      { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub sig_TERM       { shift; warn \*(AqHandled TERM\*(Aq }
\&
\&    no Moose;
\&
\&    Manager\->new\->run();
\&
\&
\& EXAMPLE #2:
\&    package Manager;
\&
\&    #    This example prints output from the children normally on
\&    #    STDERR but uses STDOUT to returns a hashref from the child to
\&    #    the parent
\&
\&    use Moose;
\&    with qw(MooseX::Workers);
\&    use POE qw(Filter::Reference Filter::Line);
\&
\&    sub run {
\&        $_[0]\->spawn(
\&            sub {
\&                sleep 3;
\&
\&                #    Return a hashref (arrayref, whatever) to the parent using P::F::Reference
\&                print POE::Filter::Reference\->new\->put([ {msg => "Hello World"} ]); # Note the [] around the return val
\&
\&                #    Print normally using P::F::Line (shown for
\&                #    completeness; in practice, just don\*(Aqt bother
\&                #    defining the _filter method
\&                #    
\&                print STDERR "Hey look, an error message";
\&            }
\&        );
\&
\&        POE::Kernel\->run();
\&    }
\&
\&    # Implement our Interface
\&    #    These two are both optional; if defined (as here), they
\&    #    should return a subclass of POE::Filter.
\&    sub stdout_filter  { new POE::Filter::Reference }
\&    sub stderr_filter  { new POE::Filter::Line }
\&
\&    sub worker_stdout  {  
\&        my ( $self, $result ) = @_;  #  $result will be a hashref:  {msg => "Hello World"} 
\&                print $result\->{msg};
\&
\&        #    Note that you can do more than just print the message \-\-
\&        #    e.g. this is the way to return data from the children for
\&        #    accumulation in the parent.  
\&        }
\&    sub worker_stderr  {
\&        my ( $self, $stderr_msg ) = @_;  #  $stderr_msg will be a string: "Hey look, an error message";
\&        warn $stderr_msg;
\&    }
\&
\&    #     From here down, this is identical to the previous example.
\&    sub worker_manager_start { warn \*(Aqstarted worker manager\*(Aq }
\&    sub worker_manager_stop  { warn \*(Aqstopped worker manager\*(Aq }
\&
\&    sub max_workers_reached  { warn \*(Aqmaximum worker count reached\*(Aq }
\&    sub worker_error   { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub worker_done    { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub worker_started { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub sig_child      { shift; warn join \*(Aq \*(Aq, @_;  }
\&    sub sig_TERM       { shift; warn \*(AqHandled TERM\*(Aq }
\&
\&    no Moose;
\&
\&    Manager\->new\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MooseX::Workers is a Role that provides easy delegation of long-running tasks 
into a managed child process. Process managment is taken care of via \s-1POE\s0 and it's 
POE::Wheel::Run module.
.SH "METHODS"
.IX Header "METHODS"
.IP "spawn ($command)" 4
.IX Item "spawn ($command)"
.PD 0
.IP "fork ($command)" 4
.IX Item "fork ($command)"
.IP "run_command ($command)" 4
.IX Item "run_command ($command)"
.PD
These three methods are the whole point of this module. 
They pass \f(CW$command\fR through to the MooseX::Worker::Engine which will take 
care of running \f(CW$command\fR for you.
.Sp
\&\fIspawn()\fR and \fIfork()\fR both envoke POE::Kernel \fIcall()\fR, which is synchronous.
.Sp
\&\fIrun_command()\fR envokes POE::Kernel \fIyield()\fR, which is asynchronous.
.Sp
If \fImax_workers()\fR has been reached, \fIrun_command()\fR warns and does nothing. It is up to you to re-submit
\&\f(CW$command\fR. See \fIenqueue()\fR if you want us to run \f(CW$command\fR as soon as another worker is free.
.IP "enqueue($command)" 4
.IX Item "enqueue($command)"
Just like \fIrun_command()\fR, only that if \fImax_workers()\fR has been set and that number of workers
has been reached, then we add \f(CW$command\fR to a \s-1FIFO\s0 command queue. As soon as any running 
worker exits, the first \f(CW$command\fR in queue (if any) will be run.
.IP "check_worker_threshold" 4
.IX Item "check_worker_threshold"
This will check to see how many workers you have compared to the max_workers limit. It returns true
if the \f(CW$num_workers\fR is >= \f(CW$max_workers\fR;
.IP "max_workers($count)" 4
.IX Item "max_workers($count)"
An accessor for the maxium number of workers. This is delegated to the MooseX::Workers::Engine object.
.IP "has_workers" 4
.IX Item "has_workers"
Check to see if we have *any* workers currently. This is delegated to the MooseX::Workers::Engine object.
.IP "num_workers" 4
.IX Item "num_workers"
Return the current number of workers. This is delegated to the MooseX::Workers::Engine object.
.IP "meta" 4
.IX Item "meta"
The Metaclass for MooseX::Workers::Engine see Moose's documentation.
.SH "INTERFACE"
.IX Header "INTERFACE"
MooseX::Worker::Engine supports the following callbacks:
.IP "worker_manager_start" 4
.IX Item "worker_manager_start"
Called when the managing session is started
.IP "worker_manager_stop" 4
.IX Item "worker_manager_stop"
Called when the managing session stops
.IP "max_workers_reached" 4
.IX Item "max_workers_reached"
Called when we reach the maximum number of workers
.IP "stdout_filter" 4
.IX Item "stdout_filter"
\&\s-1OPTIONAL\s0.  If defined, this should return an object that isa
POE::Filter.  If it doesn't, the results are undefined.  Anything that
a child proc sends on \s-1STDOUT\s0 will be passed through the relevant
filter.
.IP "stderr_filter" 4
.IX Item "stderr_filter"
\&\s-1OPTIONAL\s0.  If defined, this should return an object that isa
POE::Filter.  If it doesn't, the results are undefined.  Anything that
a child proc sends on \s-1STDERR\s0 will be passed through the relevant
filter.
.IP "worker_stdout" 4
.IX Item "worker_stdout"
Called when a child prints to \s-1STDOUT\s0.  If \f(CW\*(C`stdout_filter\*(C'\fR was
defined, the output will be filtered appropriately, as described
above.  This is useful to allow child processes to return data to the
parent (generally via POE::Filter::Reference).
.IP "worker_stderr" 4
.IX Item "worker_stderr"
Called when a child prints to \s-1STDERR\s0.  Filtered through the result of
\&\f(CW\*(C`stderr_filter\*(C'\fR if that method is defined.
.IP "worker_error" 4
.IX Item "worker_error"
Called when there is an error condition detected with the child.
.IP "worker_done" 4
.IX Item "worker_done"
Called when a worker completes \f(CW$command\fR
.IP "worker_started" 4
.IX Item "worker_started"
Called when a worker starts \f(CW$command\fR
.IP "sig_child" 4
.IX Item "sig_child"
Called when the mangaging session recieves a \s-1SIG\s0 \s-1CHDL\s0 event
.IP "sig_*" 4
.IX Item "sig_*"
Called when the underlying \s-1POE\s0 Kernel receives a signal; this is not limited to
\&\s-1OS\s0 signals (ie. what you'd usually handle in Perl's \f(CW%SIG\fR) so will also accept
arbitrary \s-1POE\s0 signals (sent via POE::Kernel\->signal), but does exclude
\&\s-1SIGCHLD/SIGCHILD\s0, which is instead handled by sig_child above.
.Sp
These interface methods are automatically inserted when MooseX::Worker::Engine
detects that your manager class contains any methods beginning with sig_.
Signals are case-sensitive, so if you wish to handle a \s-1TERM\s0 signal, you must
define a \fIsig_TERM()\fR method.  Note also that this action is performed upon
MooseX::Worker::Engine startup, so any run-time modification of your class
which 'does' MooseX::Workers is not likely to be detected.
.Sp
See the sig_TERM handler in the \s-1SYNOPSIS\s0 for an example.
.PP
See MooseX::Workers::Engine for more details. 
Also see MooseX::Workers::Job if you'd like to give your tasks
names, or set timeouts on them.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
MooseX::Workers requires no configuration files or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Moose, \s-1POE\s0, POE::Wheel::Run
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-moosex\-workers@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Prather \f(CW\*(C`<perigrin@cpan.org>\*(C'\fR
.PP
Tom Lanyon \f(CW\*(C`<dec@cpan.org>\*(C'\fR
.PP
Jay Hannah \f(CW\*(C`<jay@jays.net>\*(C'\fR
.PP
Justin Hunter \f(CW\*(C`<justin.d.hunter@gmail.com>\*(C'\fR
.PP
David K. Storrs \f(CW\*(C`<david.storrs@gmail.com>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007\-2010, Chris Prather \f(CW\*(C`<perigrin@cpan.org>\*(C'\fR. Some rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE\s0 \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1LICENSED\s0 \s-1FREE\s0 \s-1OF\s0 \s-1CHARGE\s0, \s-1THERE\s0 \s-1IS\s0 \s-1NO\s0 \s-1WARRANTY\s0
\&\s-1FOR\s0 \s-1THE\s0 \s-1SOFTWARE\s0, \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0. \s-1EXCEPT\s0 \s-1WHEN\s0
\&\s-1OTHERWISE\s0 \s-1STATED\s0 \s-1IN\s0 \s-1WRITING\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND/OR\s0 \s-1OTHER\s0 \s-1PARTIES\s0
\&\s-1PROVIDE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EITHER\s0
\&\s-1EXPRESSED\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. \s-1THE\s0
\&\s-1ENTIRE\s0 \s-1RISK\s0 \s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1WITH\s0
\&\s-1YOU\s0. \s-1SHOULD\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1PROVE\s0 \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0 \s-1THE\s0 \s-1COST\s0 \s-1OF\s0 \s-1ALL\s0
\&\s-1NECESSARY\s0 \s-1SERVICING\s0, \s-1REPAIR\s0, \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0 \s-1OR\s0 \s-1AGREED\s0 \s-1TO\s0 \s-1IN\s0 \s-1WRITING\s0
\&\s-1WILL\s0 \s-1ANY\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0, \s-1OR\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1WHO\s0 \s-1MAY\s0 \s-1MODIFY\s0 \s-1AND/OR\s0
\&\s-1REDISTRIBUTE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1AS\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1THE\s0 \s-1ABOVE\s0 \s-1LICENCE\s0, \s-1BE\s0
\&\s-1LIABLE\s0 \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0 \s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0 \s-1GENERAL\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0
\&\s-1THE\s0 \s-1SOFTWARE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1BEING\s0
\&\s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0 \s-1LOSSES\s0 \s-1SUSTAINED\s0 \s-1BY\s0 \s-1YOU\s0 \s-1OR\s0 \s-1THIRD\s0 \s-1PARTIES\s0 \s-1OR\s0 A
\&\s-1FAILURE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1TO\s0 \s-1OPERATE\s0 \s-1WITH\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1SOFTWARE\s0), \s-1EVEN\s0 \s-1IF\s0
\&\s-1SUCH\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1HAS\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGES\s0.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 296:" 4
.IX Item "Around line 296:"
=back without =over
