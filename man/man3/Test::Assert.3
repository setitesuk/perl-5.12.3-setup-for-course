.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Assert 3"
.TH Test::Assert 3 "2009-12-06" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Assert \- Assertion methods for those who like JUnit.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Use as imported methods
\&  #
\&  package My::Test;
\&
\&  use Test::Assert \*(Aq:all\*(Aq;
\&
\&  assert_true(1, "pass");
\&  assert_true(0, "fail");
\&
\&  use Test::More;
\&  assert_test(sub { require_ok($module) });
\&
\&  # Use for debugging purposes
\&  # Assertions are compiled only if Test::Assert was used
\&  # from the main package.
\&  #
\&  package My::Package;
\&
\&  use Test::Assert \*(Aq:assert\*(Aq;
\&
\&  my $state = do_something();
\&  assert_true($state >= 1 && $state <=2) if ASSERT;
\&  if ($state == 1) {
\&      # 1st state
\&      do_foo();
\&  } elsif ($state == 2) {
\&      # 2nd and last state
\&      do_bar();
\&  }
\&
\&  my $a = get_a();
\&  my $b = get_b();
\&  assert_num_not_equals(0, $b) if ASSERT;
\&  my $c = $a / $b;
\&
\&  # Clean the namespace
\&  no Test::Assert;
\&
\&  # From command line
\&  $ perl \-MTest::Assert script.pl  # sets Test::Assert::ASSERT to 1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a set of assertion methods useful for writing tests.  The
\&\s-1API\s0 is based on JUnit4 and Test::Unit::Lite and the methods die on failure.
.PP
These assertion methods might be not useful for common Test::Builder\-based
(Test::Simple, Test::More, etc.) test units.
.PP
The assertion methods can be used in class which is derived from
\&\f(CW\*(C`Test::Assert\*(C'\fR or used as standard Perl functions after importing them into
user's namespace.
.PP
\&\f(CW\*(C`Test::Assert\*(C'\fR can also wrap standard Test::Simple, Test::More or other
Test::Builder\-based tests.
.PP
The assertions can be also used for run-time checking.
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
.IP "Exception::Assertion" 4
.IX Item "Exception::Assertion"
Thrown whether an assertion failed.
.SH "USAGE"
.IX Header "USAGE"
By default, the class does not export its symbols.
.IP "use Test::Assert;" 4
.IX Item "use Test::Assert;"
Enables debug mode if it is used in \f(CW\*(C`main\*(C'\fR package.
.Sp
.Vb 2
\&  package main;
\&  use Test::Assert;    # Test::Assert::ASSERT is set to TRUE
\&
\&  $ perl \-MTest::Assert script.pl    # ditto
.Ve
.IP "use Test::Assert 'assert_true', 'fail', ...;" 4
.IX Item "use Test::Assert 'assert_true', 'fail', ...;"
Imports some methods.
.IP "use Test::Assert ':all';" 4
.IX Item "use Test::Assert ':all';"
Imports all \f(CW\*(C`assert_*\*(C'\fR methods, \f(CW\*(C`fail\*(C'\fR method and \f(CW\*(C`ASSERT\*(C'\fR constant.
.IP "use Test::Assert ':assert';" 4
.IX Item "use Test::Assert ':assert';"
Imports all \f(CW\*(C`assert_*\*(C'\fR methods and \f(CW\*(C`ASSERT\*(C'\fR constant.
.IP "no Test::Assert;" 4
.IX Item "no Test::Assert;"
Disables debug mode if it is used in \f(CW\*(C`main\*(C'\fR package.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.IP "\s-1ASSERT\s0" 4
.IX Item "ASSERT"
This constant is set to true value if \f(CW\*(C`Test::Assert\*(C'\fR module is used from
\&\f(CW\*(C`main\*(C'\fR package.  It allows to enable debug mode globally from command line.
The debug mode is disabled by default.
.Sp
.Vb 3
\&  package My::Test;
\&  use Test::Assert \*(Aq:assert\*(Aq;
\&  assert_true( 0 ) if ASSERT;  # fails only if debug mode is enabled
\&
\&  $ perl \-MTest::Assert script.pl  # enable debug mode
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "fail( \fImessage\fR : Str = undef, \fIreason\fR : Str = undef )" 4
.IX Item "fail( message : Str = undef, reason : Str = undef )"
Immediate fail the test.  The Exception::Assertion object will have set
\&\fImessage\fR and \fIreason\fR attribute based on arguments.
.IP "assert_true( \fIboolean\fR : Bool, \fImessage\fR : Str = undef )" 4
.IX Item "assert_true( boolean : Bool, message : Str = undef )"
Checks if \fIboolean\fR expression returns true value.
.IP "assert_false( \fIboolean\fR : Bool, \fImessage\fR : Str = undef )" 4
.IX Item "assert_false( boolean : Bool, message : Str = undef )"
Checks if \fIboolean\fR expression returns false value.
.IP "assert_null( \fIvalue\fR : Any, \fImessage\fR : Str = undef )" 4
.IX Item "assert_null( value : Any, message : Str = undef )"
.PD 0
.IP "assert_not_null( \fIvalue\fR : Any, \fImessage\fR : Str = undef )" 4
.IX Item "assert_not_null( value : Any, message : Str = undef )"
.PD
Checks if \fIvalue\fR is defined or not defined.
.IP "assert_equals( \fIvalue1\fR : Defined, \fIvalue2\fR : Defined, \fImessage\fR : Str = undef )" 4
.IX Item "assert_equals( value1 : Defined, value2 : Defined, message : Str = undef )"
.PD 0
.IP "assert_not_equals( \fIvalue1\fR : Defined, \fIvalue2\fR : Defined, \fImessage\fR : Str = undef )" 4
.IX Item "assert_not_equals( value1 : Defined, value2 : Defined, message : Str = undef )"
.PD
Checks if \fIvalue1\fR and \fIvalue2\fR are equals or not equals.  If \fIvalue1\fR and
\&\fIvalue2\fR look like numbers then they are compared with '==' operator,
otherwise the string 'eq' operator is used.
.IP "assert_num_equals( \fIvalue1\fR : Defined, \fIvalue2\fR : Defined, \fImessage\fR : Str = undef )" 4
.IX Item "assert_num_equals( value1 : Defined, value2 : Defined, message : Str = undef )"
.PD 0
.IP "assert_num_not_equals( \fIvalue1\fR : Defined, \fIvalue2\fR : Defined, \fImessage\fR : Str = undef )" 4
.IX Item "assert_num_not_equals( value1 : Defined, value2 : Defined, message : Str = undef )"
.PD
Force numeric comparation.
.IP "assert_str_equals( \fIvalue1\fR : Defined, \fIvalue2\fR : Defined, \fImessage\fR : Str = undef )" 4
.IX Item "assert_str_equals( value1 : Defined, value2 : Defined, message : Str = undef )"
.PD 0
.IP "assert_str_not_equals( \fIvalue1\fR : Defined, \fIvalue2\fR : Defined, \fImessage\fR : Str = undef )" 4
.IX Item "assert_str_not_equals( value1 : Defined, value2 : Defined, message : Str = undef )"
.PD
Force string comparation.
.IP "assert_matches( \fIregexp\fR : RegexpRef, \fIvalue\fR : Str, \fImessage\fR : Str = undef )" 4
.IX Item "assert_matches( regexp : RegexpRef, value : Str, message : Str = undef )"
.PD 0
.IP "assert_not_matches( \fIregexp\fR : RegexpRef, \fIvalue\fR : Str, \fImessage\fR : Str = undef )" 4
.IX Item "assert_not_matches( regexp : RegexpRef, value : Str, message : Str = undef )"
.PD
Checks if \fIvalue\fR matches \fIpattern\fR regexp.
.IP "assert_deep_equals( \fIvalue1\fR : Ref, \fIvalue2\fR : Ref, \fImessage\fR : Str = undef )" 4
.IX Item "assert_deep_equals( value1 : Ref, value2 : Ref, message : Str = undef )"
.PD 0
.IP "assert_deep_not_equals( \fIvalue1\fR : Ref, \fIvalue2\fR : Ref, \fImessage\fR : Str = undef )" 4
.IX Item "assert_deep_not_equals( value1 : Ref, value2 : Ref, message : Str = undef )"
.PD
Checks if reference \fIvalue1\fR is a deep copy of reference \fIvalue2\fR or not.
The references can be deep structure.  If they are different, the message will
display the place where they start differing.
.IP "assert_isa( \fIclass\fR : Str, \fIobject\fR : Defined, \fImessage\fR : Str = undef )" 4
.IX Item "assert_isa( class : Str, object : Defined, message : Str = undef )"
.PD 0
.IP "assert_not_isa( \fIclass\fR : Str, \fIobject\fR : Defined, \fImessage\fR : Str = undef )" 4
.IX Item "assert_not_isa( class : Str, object : Defined, message : Str = undef )"
.PD
Checks if \fIvalue\fR is a \fIclass\fR or not.
.Sp
.Vb 1
\&  assert_isa( \*(AqMy::Class\*(Aq, $obj );
.Ve
.IP "assert_raises( \fIexpected\fR : Any, \fIcode\fR : CodeRef, \fImessage\fR : Str = undef )" 4
.IX Item "assert_raises( expected : Any, code : CodeRef, message : Str = undef )"
Runs the \fIcode\fR and checks if it raises the \fIexpected\fR exception.
.Sp
If raised exception is an Exception::Base object, the assertion passes if
the exception \f(CW\*(C`matches\*(C'\fR \fIexpected\fR argument (via
\&\f(CW\*(C`Exception::Base\->matches\*(C'\fR method).
.Sp
If raised exception is not an Exception::Base object, several conditions
are checked.  If \fIexpected\fR argument is a string or array reference, the
assertion passes if the raised exception is a given class.  If the argument is
a regexp, the string representation of exception is matched against regexp.
.Sp
.Vb 1
\&  use Test::Assert \*(Aqassert_raises\*(Aq;
\&
\&  assert_raises( \*(Aqfoo\*(Aq, sub { die \*(Aqfoo\*(Aq } );
\&  assert_raises( [\*(AqException::Base\*(Aq], sub { Exception::Base\->throw } );
.Ve
.IP "assert_test( \fIcode\fR : CodeRef, \fImessage\fR : Str = undef )" 4
.IX Item "assert_test( code : CodeRef, message : Str = undef )"
Wraps Test::Builder based test function and throws Exception::Assertion
if the test is failed.  The plan test have to be disabled manually.  The
Test::More module imports the \f(CW\*(C`fail\*(C'\fR method by default which conflicts
with \f(CW\*(C`Test::Assert\*(C'\fR \f(CW\*(C`fail\*(C'\fR method.
.Sp
.Vb 2
\&  use Test::Assert \*(Aq:all\*(Aq;
\&  use Test::More ignore => [ \*(Aq!fail\*(Aq ];
\&
\&  Test::Builder\->new\->no_plan;
\&  Test::Builder\->new\->no_ending(1);
\&
\&  assert_test( sub { cmp_ok($got, \*(Aq==\*(Aq, $expected, $test_name) } );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Exception::Assertion, Test::Unit::Lite.
.SH "BUGS"
.IX Header "BUGS"
If you find the bug or want to implement new features, please report it at
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test\-Assert <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test-Assert>
.SH "AUTHOR"
.IX Header "AUTHOR"
Piotr Roszatycki <dexter@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2008, 2009 by Piotr Roszatycki <dexter@cpan.org>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
