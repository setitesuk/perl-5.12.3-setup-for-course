.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::LazyLogDispatch 3"
.TH MooseX::LazyLogDispatch 3 "2007-12-21" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::LazyLogDispatch \- A Logging Role for Moose
.SH "VERSION"
.IX Header "VERSION"
This document describes MooseX::LazyLogDispatch version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyApp;
\&    use Moose;
\&
\&    with MooseX::LazyLogDispatch;
\&    # or alternately, use this role instead to give your
\&    # class the logger methods "debug", "warning", etc...
\&    # with MooseX::LazyLogDispatch::Levels;
\&
\&    # This part optional
\&    #  without it you get some default logging to the screen
\&    has log_dispatch_conf => (
\&       is => \*(Aqro\*(Aq,
\&       isa => \*(AqLog::Dispatch::Configurator\*(Aq,
\&       lazy => 1,
\&       required => 1,
\&       default => sub {
\&           my $self = shift;
\&           My::Configurator\->new( # <\- you write this class!
\&               file => $self\->log_file,
\&               debug => $self\->debug,
\&           );
\&       },
\&    );
\&
\&    # Here\*(Aqs another variant, using a Log::Dispatch::Configurator\-style 
\&    #  hashref to configure things without an explicit subclass
\&    has log_dispatch_conf => (
\&       is => \*(Aqro\*(Aq,
\&       isa => \*(AqHashRef\*(Aq,
\&       lazy => 1,
\&       required => 1,
\&       default => sub {
\&           my $self = shift;
\&           return $self\->debug
\&               ? {
\&                   class     => \*(AqLog::Dispatch::Screen\*(Aq,
\&                   min_level => \*(Aqdebug\*(Aq,
\&                   stderr    => 1,
\&                   format    => \*(Aq[%p] %m at %F line %L%n\*(Aq,
\&               }
\&               : {
\&                   class     => \*(AqLog::Dispatch::Syslog\*(Aq,
\&                   min_level => \*(Aqinfo\*(Aq,
\&                   facility  => \*(Aqdaemon\*(Aq,
\&                   ident     => $self\->daemon_name,
\&                   format    => \*(Aq[%p] %m\*(Aq,
\&               };
\&       },
\&    );
\&    
\&    sub foo { 
\&        my ($self) = @_;
\&        $self\->logger\->debug("started foo");
\&        ....
\&        $self\->logger\->debug(\*(Aqending foo\*(Aq);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Log::Dispatch role for use with your Moose classes.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "logger"
.IX Subsection "logger"
This method is provided by this role, and it is an Log::Dispatch
instance, which you can call level-names on, as in the debug
examples in the synopsis.
.PP
If you want the level-names as direct methods in your class, you
should use the MooseX::LazyLogDispatch::Levels
role instead.
.SS "log_dispatch_config"
.IX Subsection "log_dispatch_config"
This is an optional attribute you can give to your class.  If you
define it as a hashref value, that will be interpreted in the style
of the configuration hashrefs documented in Log::Dispatch::Config
documents when they show examples of using Log::Dispatch::Configurator
for pluggable configuration.
.PP
You can also gain greater flexibility by defining your own complete
Log::Dispatch::Configurator subclass and having your \f(CW\*(C`log_dispatch_config\*(C'\fR
attribute be an instance of this class.
.PP
By lazy-loading either one (\f(CW\*(C`lazy =\*(C'\fR 1>), you can have the configuration
determined at runtime.  This is nice if you want to change your log
format and/or destination at runtime based on things like
MooseX::Getopt / MooseX::Daemonize parameters.
.PP
If you don't provide this attribute, we'll default to sending everything to
the screen in a reasonable debugging format.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::LazyLogDispatch::Levels
MooseX::LogDispatch
Log::Dispatch::Configurator
Log::Dispatch::Config
Log::Dispatch
.SH "AUTHOR"
.IX Header "AUTHOR"
Brandon Black \f(CW\*(C`<blblack@gmail.com>\*(C'\fR
.PP
Based in part on MooseX::LogDispatch by Ash Berlin \f(CW\*(C`<ash@cpan.org>\*(C'\fR and \f(CW\*(C`<perigrin@cpan.org>\*(C'\fR
.SH "LICENCE"
.IX Header "LICENCE"
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
