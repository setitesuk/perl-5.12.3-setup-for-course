.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Role::TraitConstructor 3"
.TH MooseX::Role::TraitConstructor 3 "2008-04-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Role::TraitConstructor \- A wrapper for "new" that can accept a
"traits" parameter.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package Foo;
\&    use Moose;
\&
\&        with qw(MooseX::Role::TraitConstructor);
\&
\&
\&    package Foo::Bah;
\&
\&    sub bah_method { ... }
\&
\&
\&
\&    my $foo = Foo\->new( traits => [qw( Bah )] );
\&
\&    $foo\->bah_method;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role allows you to easily accept a \f(CW\*(C`traits\*(C'\fR argument (or another name)
into your constructor, which will easily mix roles into an anonymous class
before construction, much like Moose::Meta::Attribute does.
.SH "METHODS"
.IX Header "METHODS"
.IP "constructor_trait_param" 4
.IX Item "constructor_trait_param"
Returns the string \f(CW\*(C`traits\*(C'\fR.
.Sp
Override to rename the parameter.
.ie n .IP "new_with_traits %params" 4
.el .IP "new_with_traits \f(CW%params\fR" 4
.IX Item "new_with_traits %params"
.PD 0
.ie n .IP "new_with_traits $params" 4
.el .IP "new_with_traits \f(CW$params\fR" 4
.IX Item "new_with_traits $params"
.PD
A \*(L"new\*(R" in Moose::Object like parameter processor which will call \f(CW\*(C`new\*(C'\fR on the
return value of \f(CW\*(C`interpolate_class_from_params\*(C'\fR.
.ie n .IP "interpolate_class_from_params $params" 4
.el .IP "interpolate_class_from_params \f(CW$params\fR" 4
.IX Item "interpolate_class_from_params $params"
This method will automatically create an anonymous class with the roles from
the \f(CW\*(C`traits\*(C'\fR param mixed into it if one exists.
.Sp
If not the normal class name will be returned.
.Sp
Will remove the \f(CW\*(C`traits\*(C'\fR parameter from \f(CW$params\fR.
.Sp
Also works as an instance method, but always returns a class name.
.Sp
In list context also returns the actual list of roles mixed into the class.
.ie n .IP "process_constructor_traits $params, @traits" 4
.el .IP "process_constructor_traits \f(CW$params\fR, \f(CW@traits\fR" 4
.IX Item "process_constructor_traits $params, @traits"
Calls \f(CW\*(C`filter_constructor_traits\*(C'\fR on the result of \f(CW\*(C`resolve_constructor_traits\*(C'\fR.
.ie n .IP "resolve_constructor_traits $params, @traits" 4
.el .IP "resolve_constructor_traits \f(CW$params\fR, \f(CW@traits\fR" 4
.IX Item "resolve_constructor_traits $params, @traits"
Attempt to load the traits specified in \f(CW@traits\fR usinc \f(CW\*(C`resolve_constructor_trait\*(C'\fR
.ie n .IP "guess_original_class_name $params" 4
.el .IP "guess_original_class_name \f(CW$params\fR" 4
.IX Item "guess_original_class_name $params"
.PD 0
.ie n .IP "resolve_constructor_trait $params, $possible_root, $trait" 4
.el .IP "resolve_constructor_trait \f(CW$params\fR, \f(CW$possible_root\fR, \f(CW$trait\fR" 4
.IX Item "resolve_constructor_trait $params, $possible_root, $trait"
.PD
Attempts to get a processed name from \f(CW\*(C`process_trait_name\*(C'\fR, and then tries to load that.
.Sp
If \f(CW\*(C`process_trait_name\*(C'\fR didn't return a true value or its return value could
not be loaded then \f(CW$trait\fR will be tried.
.Sp
If nothing could be loaded an error is thrown.
.Sp
\&\f(CW$possible_root\fR is the name of the first non anonymous class in the
\&\f(CW\*(C`linearized_isa\*(C'\fR, usually \f(CW$class\fR, but will \s-1DWIM\s0 in case \f(CW$class\fR has
already been interpolated with traits from a named class.
.ie n .IP "process_trait_name $trait, $params, $possible_root" 4
.el .IP "process_trait_name \f(CW$trait\fR, \f(CW$params\fR, \f(CW$possible_root\fR" 4
.IX Item "process_trait_name $trait, $params, $possible_root"
Returns \f(CW\*(C`join "::", $possible_root, $trait\*(C'\fR.
.Sp
You probably want to override this method.
.ie n .IP "filter_constructor_traits $params, $traits," 4
.el .IP "filter_constructor_traits \f(CW$params\fR, \f(CW$traits\fR," 4
.IX Item "filter_constructor_traits $params, $traits,"
Returns all the the roles that the invocant class doesn't already do (uses
\&\f(CW\*(C`does\*(C'\fR).
.SH "VERSION CONTROL"
.IX Header "VERSION CONTROL"
<http://code2.0beta.co.uk/moose/svn/>. Ask on #moose for commit bits.
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuval Kogman <nothingmuch@woobling.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&        Copyright (c) 2008 Yuval Kogman. All rights reserved
\&        This program is free software; you can redistribute
\&        it and/or modify it under the same terms as Perl itself.
.Ve
