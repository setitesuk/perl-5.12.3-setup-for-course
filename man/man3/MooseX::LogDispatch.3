.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::LogDispatch 3"
.TH MooseX::LogDispatch 3 "2010-04-18" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::LogDispatch \- A Logging Role for Moose
.SH "VERSION"
.IX Header "VERSION"
This document describes MooseX::LogDispatch version 1.1000
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& package MyApp;
\& use Moose;
\& with \*(AqMooseX::LogDispatch\*(Aq;
\& # or
\& # with \*(AqMooseX::LogDispatch::Levels\*(Aq
\&    
\& # This is optional. Will log to screen if not provided
\& has log_dispatch_conf => (
\&   is => \*(Aqro\*(Aq,
\&   lazy => 1,
\&   default => sub {
\&     my $self = shift;
\&     My::Configurator\->new( # <\- you write this class!
\&         file => $self\->log_file,
\&         debug => $self\->debug,
\&     );
\&          
\&   }
\& );
\&
\& # This is the same as the old FileBased config parameter to the role. If you
\& # prefer you could name the attribute \*(Aqconfig_filename\*(Aq instead.
\& has log_dispatch_conf => (
\&   is => \*(Aqro\*(Aq,
\&   lazy => 1,
\&   default => "/path/to/my/logger.conf"
\& );
\&
\& # Here\*(Aqs another variant, using a Log::Dispatch::Configurator\-style 
\& #  hashref to configure things without an explicit subclass
\& has log_dispatch_conf => (
\&   is => \*(Aqro\*(Aq,
\&   isa => \*(AqHashRef\*(Aq,
\&   lazy => 1,
\&   required => 1,
\&   default => sub {
\&     my $self = shift;
\&     return $self\->debug ?
\&        {
\&          class     => \*(AqLog::Dispatch::Screen\*(Aq,
\&          min_level => \*(Aqdebug\*(Aq,
\&          stderr    => 1,
\&          format    => \*(Aq[%p] %m at %F line %L%n\*(Aq,
\&        }
\&        : {
\&            class     => \*(AqLog::Dispatch::Syslog\*(Aq,
\&            min_level => \*(Aqinfo\*(Aq,
\&            facility  => \*(Aqdaemon\*(Aq,
\&            ident     => $self\->daemon_name,
\&            format    => \*(Aq[%p] %m\*(Aq,
\&        };
\&    },
\& );
\&
\&
\& sub foo { 
\&   my ($self) = @_;
\&   $self\->logger\->debug("started foo");
\&   ....
\&   $self\->logger\->debug(\*(Aqending foo\*(Aq);
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Log::Dispatch role for use with your Moose classes.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "logger"
.IX Subsection "logger"
This is the main Log::Dispatch::Config object that does all the work. It 
has methods for each of the log levels, such as \f(CW\*(C`debug\*(C'\fR or \f(CW\*(C`error\*(C'\fR.
.SS "log_dispatch_conf"
.IX Subsection "log_dispatch_conf"
This is an optional attribute you can give to your class.  If you define it as
a hashref value, that will be interpreted in the style of the configuration
hashrefs documented in Log::Dispatch::Config documents where they show
examples of using a
\&\s-1PLUGGABLE\s0 \s-1CONFIGURATOR\s0 
for pluggable configuration.
.PP
You can also gain greater flexibility by defining your own complete
Log::Dispatch::Configurator subclass and having your \f(CW\*(C`log_dispatch_config\*(C'\fR
attribute be an instance of this class.
.PP
If this attribute has a value of a string, it will be taken to by the path to
a config file for Log::Dispatch::Configurator::AppConfig.
.PP
By lazy-loading this attribute (\f(CW\*(C`lazy => 1\*(C'\fR), you can have the
configuration determined at runtime.  This is nice if you want to change your
log format and/or destination at runtime based on things like
MooseX::Getopt / MooseX::Daemonize parameters.
.PP
If you don't provide this attribute, we'll default to sending everything to
the screen in a reasonable debugging format.
.SS "use_logger_singleton"
.IX Subsection "use_logger_singleton"
If this attribute has a true value, and Log::Dispatch::Config has a
configured log instance, this will be used in preference to anything set via
\&\f(CW\*(C`log_dispatch_config\*(C'\fR.
.PP
The main use for this attribute is when you want to use this module in another
library module \- i.e. the consumer of this role is not the end user. Setting
this attribute to true makes it much easier for the end user to configure 
logging.
.PP
Note: If you are using a class consuming this one as a role, and plan on 
reinstantiating that class, its probably a good idea to set this to 1 to avoid
errors.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::LogDispatch::Levels, Log::Dispatch::Configurator,
Log::Dispatch::Config, Log::Dispatch.
.SH "DEPRECATION NOTICE"
.IX Header "DEPRECATION NOTICE"
The old \f(CW\*(C`with Logger(...)\*(C'\fR style has been deprecated in favour of just 
using one of two roles and making the config much more flexible. As of 
version 1.2000 of this module, attempting to use it will make your code die.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-moosex\-logdispatch@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.PP
Or come bother us in \f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ash Berlin \f(CW\*(C`<ash@cpan.org>\*(C'\fR
v1.2000 fixes by Mike Whitaker \f(CW\*(C`<penfold@cpan.org>\*(C'\fR
.PP
Based on work by Chris Prather  \f(CW\*(C`<perigrin@cpan.org>\*(C'\fR
.PP
Thanks to Brandon Black \f(CW\*(C`<blblack@gmail.com>\*(C'\fR for showing me a much nicer
way to configure things.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Some development sponsored by Takkle Inc.
.PP
Copyright (c) 2007, Ash Berlin \f(CW\*(C`<ash@cpan.org>\*(C'\fR. Some rights reserved.
.PP
Copyright (c) 2007, Chris Prather \f(CW\*(C`<perigrin@cpan.org>\*(C'\fR. Some rights 
reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
