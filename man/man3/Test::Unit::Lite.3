.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Unit::Lite 3"
.TH Test::Unit::Lite 3 "2009-02-12" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Unit::Lite \- Unit testing without external dependencies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Bundling the Test::Unit::Lite as a part of package distribution:
.PP
.Vb 1
\&  perl \-MTest::Unit::Lite \-e bundle
.Ve
.PP
Running all test units:
.PP
.Vb 1
\&  perl \-MTest::Unit::Lite \-e all_tests
.Ve
.PP
Using as a replacement for Test::Unit:
.PP
.Vb 3
\&  package FooBarTest;
\&  use Test::Unit::Lite;   # unnecessary if module isn\*(Aqt directly used
\&  use base \*(AqTest::Unit::TestCase\*(Aq;
\&
\&  sub new {
\&      my $self = shift()\->SUPER::new(@_);
\&      # your state for fixture here
\&      return $self;
\&  }
\&
\&  sub set_up {
\&      # provide fixture
\&  }
\&  sub tear_down {
\&      # clean up after test
\&  }
\&  sub test_foo {
\&      my $self = shift;
\&      my $obj = ClassUnderTest\->new(...);
\&      $self\->assert_not_null($obj);
\&      $self\->assert_equals(\*(Aqexpected result\*(Aq, $obj\->foo);
\&      $self\->assert(qr/pattern/, $obj\->foobar);
\&  }
\&  sub test_bar {
\&      # test the bar feature
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This framework provides lighter version of Test::Unit framework.  It
implements some of the Test::Unit classes and methods needed to run test
units.  The Test::Unit::Lite tries to be compatible with public \s-1API\s0 of
Test::Unit. It doesn't implement all classes and methods at 100% and only
those necessary to run tests are available.
.PP
The Test::Unit::Lite can be distributed as a part of package distribution,
so the package can be distributed without dependency on modules outside
standard Perl distribution.  The Test::Unit::Lite is provided as a single
file.
.SS "Bundling the Test::Unit::Lite as a part of package distribution"
.IX Subsection "Bundling the Test::Unit::Lite as a part of package distribution"
The Test::Unit::Lite framework can be bundled to the package distribution.
Then the Test::Unit::Lite module is copied to the \fIinc\fR directory of the
source directory for the package distribution.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "bundle" 4
.IX Item "bundle"
Copies Test::Unit::Lite modules into \fIinc\fR directory.  Creates missing
subdirectories if needed.  Silently overwrites previous module if was
existing.
.IP "all_tests" 4
.IX Item "all_tests"
Creates new test runner for Test::Unit::Lite::AllTests suite which searches
for test units in \fIt/tlib\fR directory.
.SH "CLASSES"
.IX Header "CLASSES"
.SS "Test::Unit::TestCase"
.IX Subsection "Test::Unit::TestCase"
This is a base class for single unit test module.  The user's unit test
module can override the default methods that are simple stubs.
.PP
The \s-1MESSAGE\s0 argument is optional and is included to the default error message
when the assertion is false.
.IP "new" 4
.IX Item "new"
The default constructor which just bless an empty anonymous hash reference.
.IP "set_up" 4
.IX Item "set_up"
This method is called at the start of each test unit processing.  It is empty
method and can be overridden in derived class.
.IP "tear_down" 4
.IX Item "tear_down"
This method is called at the end of each test unit processing.  It is empty
method and can be overridden in derived class.
.IP "list_tests" 4
.IX Item "list_tests"
Returns the list of test methods in this class and base classes.
.IP "fail([\s-1MESSAGE\s0])" 4
.IX Item "fail([MESSAGE])"
Immediate fail the test.
.IP "assert(\s-1ARG\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert(ARG [, MESSAGE])"
Checks if \s-1ARG\s0 expression returns true value.
.IP "assert_null(\s-1ARG\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_null(ARG [, MESSAGE])"
.PD 0
.IP "assert_not_null(\s-1ARG\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_not_null(ARG [, MESSAGE])"
.PD
Checks if \s-1ARG\s0 is defined or not defined.
.IP "assert_equals(\s-1ARG1\s0, \s-1ARG2\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_equals(ARG1, ARG2 [, MESSAGE])"
.PD 0
.IP "assert_not_equals(\s-1ARG1\s0, \s-1ARG2\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_not_equals(ARG1, ARG2 [, MESSAGE])"
.PD
Checks if \s-1ARG1\s0 and \s-1ARG2\s0 are equals or not equals.  If \s-1ARG1\s0 and \s-1ARG2\s0 look like
numbers then they are compared with '==' operator, otherwise the string 'eq'
operator is used.
.IP "assert_num_equals(\s-1ARG1\s0, \s-1ARG2\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_num_equals(ARG1, ARG2 [, MESSAGE])"
.PD 0
.IP "assert_num_not_equals(\s-1ARG1\s0, \s-1ARG2\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_num_not_equals(ARG1, ARG2 [, MESSAGE])"
.PD
Force numeric comparition.
.IP "assert_str_equals(\s-1ARG1\s0, \s-1ARG2\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_str_equals(ARG1, ARG2 [, MESSAGE])"
.PD 0
.IP "assert_str_not_equals(\s-1ARG1\s0, \s-1ARG2\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_str_not_equals(ARG1, ARG2 [, MESSAGE])"
.PD
Force string comparition.
.IP "assert(qr/PATTERN/, \s-1ARG\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert(qr/PATTERN/, ARG [, MESSAGE])"
.PD 0
.IP "assert_matches(qr/PATTERN/, \s-1ARG\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_matches(qr/PATTERN/, ARG [, MESSAGE])"
.IP "assert_does_not_match(qr/PATTERN/, \s-1ARG\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_does_not_match(qr/PATTERN/, ARG [, MESSAGE])"
.PD
Checks if \s-1ARG\s0 matches \s-1PATTER\s0 regexp.
.IP "assert_deep_equals(\s-1ARG1\s0, \s-1ARG2\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_deep_equals(ARG1, ARG2 [, MESSAGE])"
.PD 0
.IP "assert_deep_not_equals(\s-1ARG1\s0, \s-1ARG2\s0 [, \s-1MESSAGE\s0])" 4
.IX Item "assert_deep_not_equals(ARG1, ARG2 [, MESSAGE])"
.PD
Check if reference \s-1ARG1\s0 is a deep copy of reference \s-1ARG2\s0 or not.  The
references can be deep structure.  If they are different, the message will
display the place where they start differing.
.SS "Test::Unit::TestSuite"
.IX Subsection "Test::Unit::TestSuite"
This is a base class for test suite, which groups several test units.
.IP "empty_new([\s-1NAME\s0])" 4
.IX Item "empty_new([NAME])"
Creates a fresh suite with no tests.
.IP "new([\s-1CLASS\s0 | \s-1TEST\s0])" 4
.IX Item "new([CLASS | TEST])"
Creates a test suite from unit test name or class.  If a test suite is
provided as the argument, it merely returns that suite.  If a test case is
provided, it extracts all test case methods (see
Test::Unit::TestCase\->list_test) from the test case into a new test suite.
.IP "name" 4
.IX Item "name"
Contains the name of the current test suite.
.IP "units" 4
.IX Item "units"
Contains the list of test units.
.IP "add_test([\s-1TEST_CLASSNAME\s0 | \s-1TEST_OBJECT\s0])" 4
.IX Item "add_test([TEST_CLASSNAME | TEST_OBJECT])"
Adds the test object to a suite.
.IP "count_test_cases" 4
.IX Item "count_test_cases"
Returns the number of test cases in this suite.
.IP "run" 4
.IX Item "run"
Runs the test suite and output the results as \s-1TAP\s0 report.
.SS "Test::Unit::TestRunner"
.IX Subsection "Test::Unit::TestRunner"
This is the test runner which outputs text report about finished test suite.
.ie n .IP "new([$fh_out [, $fh_err]])" 4
.el .IP "new([$fh_out [, \f(CW$fh_err\fR]])" 4
.IX Item "new([$fh_out [, $fh_err]])"
The constructor for whole test framework.  Its optional parameters are
filehandles for standard output and error messages.
.IP "fh_out" 4
.IX Item "fh_out"
Contains the filehandle for standard output.
.IP "fh_err" 4
.IX Item "fh_err"
Contains the filehandle for error messages.
.IP "suite" 4
.IX Item "suite"
Contains the test suite object.
.IP "print_header" 4
.IX Item "print_header"
Called before running test suite.
.IP "print_error" 4
.IX Item "print_error"
Called after error was occurred on \f(CW\*(C`set_up\*(C'\fR or \f(CW\*(C`tear_down\*(C'\fR method.
.IP "print_failure" 4
.IX Item "print_failure"
Called after test unit is failed.
.IP "print_pass" 4
.IX Item "print_pass"
Called after test unit is passed.
.IP "print_footer" 4
.IX Item "print_footer"
Called after running test suite.
.IP "start(\s-1TEST_SUITE\s0)" 4
.IX Item "start(TEST_SUITE)"
Starts the test suite.
.SS "Test::Unit::Result"
.IX Subsection "Test::Unit::Result"
This object contains the results of test suite.
.IP "new" 4
.IX Item "new"
Creates a new object.
.IP "messages" 4
.IX Item "messages"
Contains the array of result messages.  The single message is a hash which
contains:
.RS 4
.IP "test" 4
.IX Item "test"
the test unit name,
.IP "type" 4
.IX Item "type"
the type of message (\s-1PASS\s0, \s-1ERROR\s0, \s-1FAILURE\s0),
.IP "message" 4
.IX Item "message"
the text of message.
.RE
.RS 4
.RE
.IP "errors" 4
.IX Item "errors"
Contains the number of collected errors.
.IP "failures" 4
.IX Item "failures"
Contains the number of collected failures.
.IP "passes" 4
.IX Item "passes"
Contains the number of collected passes.
.IP "add_error(\s-1TEST\s0, \s-1MESSAGE\s0)" 4
.IX Item "add_error(TEST, MESSAGE)"
Adds an error to the report.
.IP "add_failure(\s-1TEST\s0, \s-1MESSAGE\s0)" 4
.IX Item "add_failure(TEST, MESSAGE)"
Adds an failure to the report.
.IP "add_pass(\s-1TEST\s0, \s-1MESSAGE\s0)" 4
.IX Item "add_pass(TEST, MESSAGE)"
Adds a pass to the report.
.SS "Test::Unit::HarnessUnit"
.IX Subsection "Test::Unit::HarnessUnit"
This is the test runner which outputs in the same format that
Test::Harness expects (Test Anything Protocol).  It is derived
from Test::Unit::TestRunner.
.SS "Test::Unit::Debug"
.IX Subsection "Test::Unit::Debug"
The empty class which is provided for compatibility with original
Test::Unit framework.
.SS "Test::Unit::Lite::AllTests"
.IX Subsection "Test::Unit::Lite::AllTests"
The test suite which searches for test units in \fIt/tlib\fR directory.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
Test::Unit::Lite should be compatible with public \s-1API\s0 of Test::Unit.
The Test::Unit::Lite also has some known incompatibilities:
.IP "\(bu" 2
The test methods are sorted alphabetically.
.IP "\(bu" 2
It implements new assertion method: \fBassert_deep_not_equals\fR.
.IP "\(bu" 2
Does not support \fBok\fR, \fBassert\fR(\s-1CODEREF\s0, \f(CW@ARGS\fR) and \fBmulti_assert\fR.
.PP
\&\f(CW\*(C`Test::Unit::Lite\*(C'\fR is compatible with Test::Assert assertion functions.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "t/tlib/SuccessTest.pm"
.IX Subsection "t/tlib/SuccessTest.pm"
This is the simple unit test module.
.PP
.Vb 1
\&  package SuccessTest;
\&
\&  use strict;
\&  use warnings;
\&
\&  use base \*(AqTest::Unit::TestCase\*(Aq;
\&
\&  sub test_success {
\&    my $self = shift;
\&    $self\->assert(1);
\&  }
\&
\&  1;
.Ve
.SS "t/all_tests.t"
.IX Subsection "t/all_tests.t"
This is the test script for Test::Harness called with \*(L"make test\*(R".
.PP
.Vb 1
\&  #!/usr/bin/perl
\&
\&  use strict;
\&  use warnings;
\&
\&  use File::Spec;
\&  use Cwd;
\&
\&  BEGIN {
\&      unshift @INC, map { /(.*)/; $1 } split(/:/, $ENV{PERL5LIB}) if defined $ENV{PERL5LIB} and ${^TAINT};
\&
\&      my $cwd = ${^TAINT} ? do { local $_=getcwd; /(.*)/; $1 } : \*(Aq.\*(Aq;
\&      unshift @INC, File::Spec\->catdir($cwd, \*(Aqinc\*(Aq);
\&      unshift @INC, File::Spec\->catdir($cwd, \*(Aqlib\*(Aq);
\&  }
\&
\&  use Test::Unit::Lite;
\&
\&  local $SIG{_\|_WARN_\|_} = sub { require Carp; Carp::confess("Warning: $_[0]") };
\&
\&  Test::Unit::HarnessUnit\->new\->start(\*(AqTest::Unit::Lite::AllTests\*(Aq);
.Ve
.SS "t/test.pl"
.IX Subsection "t/test.pl"
This is the optional script for calling test suite directly.
.PP
.Vb 1
\&  #!/usr/bin/perl
\&
\&  use strict;
\&  use warnings;
\&
\&  use File::Basename;
\&  use File::Spec;
\&  use Cwd;
\&
\&  BEGIN {
\&      chdir dirname(_\|_FILE_\|_) or die "$!";
\&      chdir \*(Aq..\*(Aq or die "$!";
\&
\&      unshift @INC, map { /(.*)/; $1 } split(/:/, $ENV{PERL5LIB}) if defined $ENV{PERL5LIB} and ${^TAINT};
\&
\&      my $cwd = ${^TAINT} ? do { local $_=getcwd; /(.*)/; $1 } : \*(Aq.\*(Aq;
\&      unshift @INC, File::Spec\->catdir($cwd, \*(Aqinc\*(Aq);
\&      unshift @INC, File::Spec\->catdir($cwd, \*(Aqlib\*(Aq);
\&  }
\&
\&  use Test::Unit::Lite;
\&
\&  local $SIG{_\|_WARN_\|_} = sub { require Carp; Carp::confess("Warning: $_[0]") };
\&
\&  all_tests;
.Ve
.PP
This is perl equivalent of shell command line:
.PP
.Vb 1
\&  perl \-Iinc \-Ilib \-MTest::Unit::Lite \-w \-e all_tests
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Unit, Test::Assert.
.SH "TESTS"
.IX Header "TESTS"
The Test::Unit::Lite was tested as a Test::Unit replacement for following
distributions: Test::C2FIT, XAO::Base, Exception::Base.
.SH "BUGS"
.IX Header "BUGS"
If you find the bug or need new feature, please report it.
.SH "AUTHOR"
.IX Header "AUTHOR"
Piotr Roszatycki <dexter@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2007, 2008, 2009 by Piotr Roszatycki <dexter@debian.org>.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
