.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "POE::Pipe::OneWay 3"
.TH POE::Pipe::OneWay 3 "2010-11-19" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
POE::Pipe::OneWay \- a portable API for one\-way pipes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  my ($read, $write) = POE::Pipe::OneWay\->new();
\&  die "couldn\*(Aqt create a pipe: $!" unless defined $read;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The right way to create an anonymous pipe varies from one operating
system to the next.  Some operating systems support \f(CW\*(C`pipe()\*(C'\fR.  Others
require \f(CW\*(C`socketpair()\*(C'\fR.  And a few operating systems support neither,
so a plain old socket must be created.
.PP
POE::Pipe::OneWay will attempt to create a unidirectional pipe using
\&\f(CW\*(C`pipe()\*(C'\fR, \f(CW\*(C`socketpair()\*(C'\fR, and IO::Socket::INET, in that order.
Exceptions are hardcoded for operating systems with broken or
nonstandard behaviors.
.PP
The upshot of all this is that an application can portably create a
one-way pipe by instantiating POE::Pipe::OneWay.  The work of deciding
how to create the pipe and opening the handles will be taken care of
internally.
.PP
POE::Pipe::OneWay may be used outside of \s-1POE\s0, as it doesn't use \s-1POE\s0
internally.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.SS "new [\s-1TYPE\s0]"
.IX Subsection "new [TYPE]"
Create a new one-way pipe, optionally constraining it to a particular
\&\s-1TYPE\s0 of pipe.  One-way pipes have two ends: a \*(L"read\*(R" end and a \*(L"write\*(R"
end.  On success, \fInew()\fR returns two handles: one for the \*(L"read\*(R" end
and one for the \*(L"write\*(R" end.  Returns nothing on failure, and sets $!
to explain why the constructor failed.
.PP
.Vb 2
\&  my ($read, $write) = POE::Pipe::OneWay\->new();
\&  die $! unless defined $read;
.Ve
.PP
\&\s-1TYPE\s0 may be one of \*(L"pipe\*(R", \*(L"socketpair\*(R", or \*(L"inet\*(R".  When set,
POE::Pipe::OneWay will constrain its search to either \f(CW\*(C`pipe()\*(C'\fR, a
UNIX-domain \f(CW\*(C`socketpair()\*(C'\fR, or plain old sockets, respectively.
Otherwise \fInew()\fR will try each method in order, or a particular method
predetermined to be the best one for the current operating
environment.
.SH "BUGS"
.IX Header "BUGS"
POE::Pipe::OneWay may block up to one second on some systems if
failure occurs while trying to create \*(L"inet\*(R" sockets.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
POE::Pipe, POE::Pipe::TwoWay.
.SH "AUTHOR & COPYRIGHT"
.IX Header "AUTHOR & COPYRIGHT"
POE::Pipe::OneWay is copyright 2000\-2008 by Rocco Caputo.  All rights
reserved.  POE::Pipe::OneWay is free software; you may redistribute it
and/or modify it under the same terms as Perl itself.
