.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::SimpleConfig 3"
.TH MooseX::SimpleConfig 3 "2010-08-15" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::SimpleConfig \- A Moose role for setting attributes from a simple configfile
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  ## A YAML configfile named /etc/my_app.yaml:
\&  foo: bar
\&  baz: 123
\&
\&  ## In your class
\&  package My::App;
\&  use Moose;
\&
\&  with \*(AqMooseX::SimpleConfig\*(Aq;
\&
\&  has \*(Aqfoo\*(Aq => (is => \*(Aqro\*(Aq, isa => \*(AqStr\*(Aq, required => 1);
\&  has \*(Aqbaz\*(Aq  => (is => \*(Aqrw\*(Aq, isa => \*(AqInt\*(Aq, required => 1);
\&
\&  # ... rest of the class here
\&
\&  ## in your script
\&  #!/usr/bin/perl
\&
\&  use My::App;
\&
\&  my $app = My::App\->new_with_config(configfile => \*(Aq/etc/my_app.yaml\*(Aq);
\&  # ... rest of the script here
\&
\&  ####################
\&  ###### combined with MooseX::Getopt:
\&
\&  ## In your class
\&  package My::App;
\&  use Moose;
\&
\&  with \*(AqMooseX::SimpleConfig\*(Aq;
\&  with \*(AqMooseX::Getopt\*(Aq;
\&
\&  has \*(Aqfoo\*(Aq => (is => \*(Aqro\*(Aq, isa => \*(AqStr\*(Aq, required => 1);
\&  has \*(Aqbaz\*(Aq  => (is => \*(Aqrw\*(Aq, isa => \*(AqInt\*(Aq, required => 1);
\&
\&  # ... rest of the class here
\&
\&  ## in your script
\&  #!/usr/bin/perl
\&
\&  use My::App;
\&
\&  my $app = My::App\->new_with_options();
\&  # ... rest of the script here
\&
\&  ## on the command line
\&  % perl my_app_script.pl \-configfile /etc/my_app.yaml \-otherthing 123
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role loads simple configfiles to set object attributes.  It
is based on the abstract role MooseX::ConfigFromFile, and uses
Config::Any to load your configfile.  Config::Any will in
turn support any of a variety of different config formats, detected
by the file extension.  See Config::Any for more details about
supported formats.
.PP
Like all MooseX::ConfigFromFile \-derived configfile loaders, this
module is automatically supported by the MooseX::Getopt role as
well, which allows specifying \f(CW\*(C`\-configfile\*(C'\fR on the commandline.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "configfile"
.IX Subsection "configfile"
Provided by the base role MooseX::ConfigFromFile.  You can
provide a default configfile pathname like so:
.PP
.Vb 1
\&  has \*(Aq+configfile\*(Aq => ( default => \*(Aq/etc/myapp.yaml\*(Aq );
.Ve
.PP
You can pass an array of filenames if you want, but as usual the array
has to be wrapped in a sub ref.
.PP
.Vb 1
\&  has \*(Aq+configfile\*(Aq => ( default => sub { [ \*(Aq/etc/myapp.yaml\*(Aq, \*(Aq/etc/myapp_local.yml\*(Aq ] } );
.Ve
.PP
Config files are trivially merged at the top level, with the right-hand files taking precedence.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new_with_config"
.IX Subsection "new_with_config"
Provided by the base role MooseX::ConfigFromFile.  Acts just like
regular \f(CW\*(C`new()\*(C'\fR, but also accepts an argument \f(CW\*(C`configfile\*(C'\fR to specify
the configfile from which to load other attributes.  Explicit arguments
to \f(CW\*(C`new_with_config\*(C'\fR will override anything loaded from the configfile.
.SS "get_config_from_file"
.IX Subsection "get_config_from_file"
Called internally by either \f(CW\*(C`new_with_config\*(C'\fR or MooseX::Getopt's
\&\f(CW\*(C`new_with_options\*(C'\fR.  Invokes Config::Any to parse \f(CW\*(C`configfile\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brandon L. Black, <blblack@gmail.com>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
